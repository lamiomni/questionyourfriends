//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;

namespace QuestionYourFriendsDataAccess
{
    public partial class QuestionYourFriendsEntities : ObjectContext
    {
        public const string ConnectionString = "name=QuestionYourFriendsEntities";
        public const string ContainerName = "QuestionYourFriendsEntities";
    
        #region Constructors
    
        public QuestionYourFriendsEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public QuestionYourFriendsEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public QuestionYourFriendsEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // La création de proxys requiert l'utilisation de ProxyDataContractResolver et
            // peut autoriser le chargement différé, qui peut développer le graphique chargé pendant la sérialisation.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region Propriétés ObjectSet
    
        public ObjectSet<Question> Questions
        {
            get { return _questions  ?? (_questions = CreateObjectSet<Question>("Questions")); }
        }
        private ObjectSet<Question> _questions;
    
        public ObjectSet<Transac> Transacs
        {
            get { return _transacs  ?? (_transacs = CreateObjectSet<Transac>("Transacs")); }
        }
        private ObjectSet<Transac> _transacs;
    
        public ObjectSet<User> Users
        {
            get { return _users  ?? (_users = CreateObjectSet<User>("Users")); }
        }
        private ObjectSet<User> _users;

        #endregion
    }
}

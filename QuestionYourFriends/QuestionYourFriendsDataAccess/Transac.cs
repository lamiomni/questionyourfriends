//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace QuestionYourFriendsDataAccess
{
    public partial class Transac
    {
        #region Primitive Properties
    
        public virtual int id
        {
            get;
            set;
        }
    
        public virtual int amount
        {
            get;
            set;
        }
    
        public virtual int status
        {
            get;
            set;
        }
    
        public virtual int userId
        {
            get { return _userId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_userId != value)
                    {
                        if (User != null && User.id != value)
                        {
                            User = null;
                        }
                        _userId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _userId;
    
        public virtual int type
        {
            get;
            set;
        }
    
        public virtual Nullable<int> questionId
        {
            get { return _questionId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_questionId != value)
                    {
                        if (Question != null && Question.id != value)
                        {
                            Question = null;
                        }
                        _questionId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _questionId;

        #endregion
        #region Navigation Properties
    
        public virtual Question Question
        {
            get { return _question; }
            set
            {
                if (!ReferenceEquals(_question, value))
                {
                    var previousValue = _question;
                    _question = value;
                    FixupQuestion(previousValue);
                }
            }
        }
        private Question _question;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupQuestion(Question previousValue)
        {
            if (previousValue != null && previousValue.Transacs.Contains(this))
            {
                previousValue.Transacs.Remove(this);
            }
    
            if (Question != null)
            {
                if (!Question.Transacs.Contains(this))
                {
                    Question.Transacs.Add(this);
                }
                if (questionId != Question.id)
                {
                    questionId = Question.id;
                }
            }
            else if (!_settingFK)
            {
                questionId = null;
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Transacs.Contains(this))
            {
                previousValue.Transacs.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Transacs.Contains(this))
                {
                    User.Transacs.Add(this);
                }
                if (userId != User.id)
                {
                    userId = User.id;
                }
            }
        }

        #endregion
    }
}

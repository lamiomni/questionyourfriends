//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace QuestionYourFriendsDataAccess
{
    [Serializable]
    [DataContract(IsReference = true)]
    [KnownType(typeof(User))]
    [KnownType(typeof(Transac))]
    public partial class Question: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public int id_owner
        {
            get { return _id_owner; }
            set
            {
                if (_id_owner != value)
                {
                    ChangeTracker.RecordOriginalValue("id_owner", _id_owner);
                    if (!IsDeserializing)
                    {
                        if (Owner != null && Owner.id != value)
                        {
                            Owner = null;
                        }
                    }
                    _id_owner = value;
                    OnPropertyChanged("id_owner");
                }
            }
        }
        private int _id_owner;
    
        [DataMember]
        public int id_receiver
        {
            get { return _id_receiver; }
            set
            {
                if (_id_receiver != value)
                {
                    ChangeTracker.RecordOriginalValue("id_receiver", _id_receiver);
                    if (!IsDeserializing)
                    {
                        if (Receiver != null && Receiver.id != value)
                        {
                            Receiver = null;
                        }
                    }
                    _id_receiver = value;
                    OnPropertyChanged("id_receiver");
                }
            }
        }
        private int _id_receiver;
    
        [DataMember]
        public string text
        {
            get { return _text; }
            set
            {
                if (_text != value)
                {
                    _text = value;
                    OnPropertyChanged("text");
                }
            }
        }
        private string _text;
    
        [DataMember]
        public string answer
        {
            get { return _answer; }
            set
            {
                if (_answer != value)
                {
                    _answer = value;
                    OnPropertyChanged("answer");
                }
            }
        }
        private string _answer;
    
        [DataMember]
        public int anom_price
        {
            get { return _anom_price; }
            set
            {
                if (_anom_price != value)
                {
                    _anom_price = value;
                    OnPropertyChanged("anom_price");
                }
            }
        }
        private int _anom_price;
    
        [DataMember]
        public int private_price
        {
            get { return _private_price; }
            set
            {
                if (_private_price != value)
                {
                    _private_price = value;
                    OnPropertyChanged("private_price");
                }
            }
        }
        private int _private_price;
    
        [DataMember]
        public bool undesirable
        {
            get { return _undesirable; }
            set
            {
                if (_undesirable != value)
                {
                    _undesirable = value;
                    OnPropertyChanged("undesirable");
                }
            }
        }
        private bool _undesirable;
    
        [DataMember]
        public System.DateTime date_pub
        {
            get { return _date_pub; }
            set
            {
                if (_date_pub != value)
                {
                    _date_pub = value;
                    OnPropertyChanged("date_pub");
                }
            }
        }
        private System.DateTime _date_pub;
    
        [DataMember]
        public Nullable<System.DateTime> date_answer
        {
            get { return _date_answer; }
            set
            {
                if (_date_answer != value)
                {
                    _date_answer = value;
                    OnPropertyChanged("date_answer");
                }
            }
        }
        private Nullable<System.DateTime> _date_answer;
    
        [DataMember]
        public bool deleted
        {
            get { return _deleted; }
            set
            {
                if (_deleted != value)
                {
                    _deleted = value;
                    OnPropertyChanged("deleted");
                }
            }
        }
        private bool _deleted;

        #endregion
        #region Navigation Properties
    
    	[XmlIgnore]
        [DataMember]
        public User Owner
        {
            get { return _owner; }
            set
            {
                if (!ReferenceEquals(_owner, value))
                {
                    var previousValue = _owner;
                    _owner = value;
                    FixupOwner(previousValue);
                    OnNavigationPropertyChanged("Owner");
                }
            }
        }
        private User _owner;
    
    	[XmlIgnore]
        [DataMember]
        public User Receiver
        {
            get { return _receiver; }
            set
            {
                if (!ReferenceEquals(_receiver, value))
                {
                    var previousValue = _receiver;
                    _receiver = value;
                    FixupReceiver(previousValue);
                    OnNavigationPropertyChanged("Receiver");
                }
            }
        }
        private User _receiver;
    
    	[XmlIgnore]
        [DataMember]
        public TrackableCollection<Transac> Transacs
        {
            get
            {
                if (_transacs == null)
                {
                    _transacs = new TrackableCollection<Transac>();
                    _transacs.CollectionChanged += FixupTransacs;
                }
                return _transacs;
            }
            set
            {
                if (!ReferenceEquals(_transacs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_transacs != null)
                    {
                        _transacs.CollectionChanged -= FixupTransacs;
                    }
                    _transacs = value;
                    if (_transacs != null)
                    {
                        _transacs.CollectionChanged += FixupTransacs;
                    }
                    OnNavigationPropertyChanged("Transacs");
                }
            }
        }
        private TrackableCollection<Transac> _transacs;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Owner = null;
            Receiver = null;
            Transacs.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void FixupOwner(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MyQuestions.Contains(this))
            {
                previousValue.MyQuestions.Remove(this);
            }
    
            if (Owner != null)
            {
                if (!Owner.MyQuestions.Contains(this))
                {
                    Owner.MyQuestions.Add(this);
                }
    
                id_owner = Owner.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Owner")
                    && (ChangeTracker.OriginalValues["Owner"] == Owner))
                {
                    ChangeTracker.OriginalValues.Remove("Owner");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Owner", previousValue);
                }
                if (Owner != null && !Owner.ChangeTracker.ChangeTrackingEnabled)
                {
                    Owner.StartTracking();
                }
            }
        }
    
        private void FixupReceiver(User previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.QuestionsToMe.Contains(this))
            {
                previousValue.QuestionsToMe.Remove(this);
            }
    
            if (Receiver != null)
            {
                if (!Receiver.QuestionsToMe.Contains(this))
                {
                    Receiver.QuestionsToMe.Add(this);
                }
    
                id_receiver = Receiver.id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Receiver")
                    && (ChangeTracker.OriginalValues["Receiver"] == Receiver))
                {
                    ChangeTracker.OriginalValues.Remove("Receiver");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Receiver", previousValue);
                }
                if (Receiver != null && !Receiver.ChangeTracker.ChangeTrackingEnabled)
                {
                    Receiver.StartTracking();
                }
            }
        }
    
        private void FixupTransacs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Transac item in e.NewItems)
                {
                    item.Question = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Transacs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Transac item in e.OldItems)
                {
                    if (ReferenceEquals(item.Question, this))
                    {
                        item.Question = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Transacs", item);
                    }
                }
            }
        }

        #endregion
    }
}
